image: golang:1.13.4-stretch

variables:
  REPO_NAME: gitlab.com/olaris/olaris-rename

# The problem is that to be able to use go get, one needs to put
# the repository in the $GOPATH. So for example if your gitlab domain
# is gitlab.com, and that your repository is namespace/project, and
# the default GOPATH being /go, then you'd need to have your
# repository in /go/src/gitlab.com/namespace/project
# Thus, making a symbolic link corrects this.
before_script:
  - apt-get update
  - apt-get install zip unzip
  - mkdir -p $GOPATH/src/$(dirname $REPO_NAME)
  - cp -r $CI_PROJECT_DIR/ $GOPATH/src/$REPO_NAME
  - cd $GOPATH/src/$REPO_NAME

stages:
    - format
    - test
    - build

format:
    stage: format
    script:
      - go fmt $(go list ./... | grep -v /vendor/)
      - go vet $(go list ./... | grep -v /vendor/)

build:
    stage: build
    script:
      - go build -o olaris-rename flags.go main.go util.go
      - cp -r olaris-rename $CI_PROJECT_DIR/

    artifacts:
      paths:
        - olaris-rename

test:
    stage: test
    script:
      - go test -race $(go list ./... | grep -v /vendor/)

